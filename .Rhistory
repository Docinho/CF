demo()
devtools::install_github("ropensci/plotly")
library(dplyr)
library(corrplot)
library(GGally)
library(ggplot2)
library(reshape2)
library(caret)
## preparando os dados
setwd("Área de Trabalho")
dados_alunos <- read.csv("alunosUFCGAnon.csv")
dados_aluno_cc <- dados_alunos %>% filter(Cod_Curso == 14102100 & Cod_Evasao == 0 & Tipo == "Obrigatória")
dados_aluno_cc <- dados_aluno_cc %>% mutate(Matricula = factor(Matricula)) %>% arrange(Matricula) %>%
select(Matricula, Cod_Disciplina, Nome_Disciplina, Periodo, Creditos, Media_Disciplina, Situacao, Periodo_Ingresso, Periodo_Relativo)
dados_aluno_cc <- dados_aluno_cc %>% group_by(Matricula) %>% mutate(Media = round(mean(Media_Disciplina), digits = 2)) %>% filter(!is.na(Media))
# storing data as factors insures that the modeling functions will treat such data correctly.
# Factors in R are stored as a vector of integer values with a corresponding set of character values to use when the factor is displayed
# Calulo do CRA
alunos_cra <- dados_aluno_cc %>% mutate(Cra.Crontibute = Media*Creditos) %>% summarise(cra = sum(Cra.Crontibute)/sum(Creditos))
alunos_max_media <- dados_aluno_cc %>% group_by(Matricula, Media_Disciplina) %>% filter(Media_Disciplina == max(Media_Disciplina)) %>% ungroup() %>%
select(Nome_Disciplina, Matricula, Media_Disciplina) %>% mutate(Nome_Disciplina = as.factor(gsub(" ", ".", Nome_Disciplina))) %>%
dcast(Matricula ~ Nome_Disciplina, mean)
alunos_max_media <- alunos_max_media %>% subset(select = -`SEMINÁRIOS.(EDUCAÇÃO.AMBIENTAL)`)
alunos_graduados <- alunos_max_media[complete.cases(alunos_max_media), ]
View(alunos_graduados)
getScore <- function(history, similarities) {
sum(history*similarities)/sum(similarities)
}
setwd(dir = "CF/")
dados_alemanha <- read.csv(file = "lastfm-matrix-germany.csv")
head(dados_alemanha[, c(1, 200:220)])
alemanha_ib <- (dados_alemanha[,!(names(dados_alemanha) %in% c("user"))])
getCosine <- function(x, y){
this.cosine <- (sum(x*y)/(sqrt(sum(x*x))*(sqrt(sum(y*y)))))
return(this.cosine)
}
holder <- matrix(NA, nrow=ncol(alemanha_ib), ncol = ncol(alemanha_ib), dimnames = list(colnames(alemanha_ib), colnames(alemanha_ib)))
dados_alemanha_ib_similaridade <- as.data.frame(holder)
for(coluna in 1:ncol(alemanha_ib)){
# loop pelas colunas para cada coluna
for(col in 1:ncol(alemanha_ib)) {
dados_alemanha_ib_similaridade[coluna,col] = getCosine(alemanha_ib[coluna], alemanha_ib[col])
}
}
dados_alemanha_vizinhos <- matrix(NA, nrow = ncol(dados_alemanha_ib_similaridade), ncol = 11, dimnames = list(colnames(dados_alemanha_ib_similaridade)))
for(elemento in 1:ncol(alemanha_ib)) {
dados_alemanha_vizinhos[elemento,] <- (t(head(n=11, rownames(dados_alemanha_ib_similaridade[order(dados_alemanha_ib_similaridade[,elemento], decreasing = T),][elemento]))))
}
getScore <- function(history, similarities) {
sum(history*similarities)/sum(similarities)
}
holder<-matrix(NA, nrow = nrow(dados_alemanha), ncol=ncol(dados_alemanha)-1, dimnames = list(dados_alemanha$user), colnames(dados_alemanha[-1]))
holder<-matrix(NA, nrow = nrow(dados_alemanha), ncol=ncol(dados_alemanha)-1, dimnames = list((dados_alemanha$user), colnames(dados_alemanha[-1])))
holder<-matrix(NA, nrow = nrow(dados_alemanha), ncol=ncol(dados_alemanha)-1, dimnames = list((dados_alemanha$user), colnames(dados_alemanha[-1])))
View(holder)
topN <- ((head(n=11,(dados_alemanha_ib_similaridade[order(dados_alemanha_ib_similaridade[,product],decreasing = T),]))))
for(usuario in 1:nrow(holder)) {
for(banda in 1:col(holder)){
user <- rownames(holder)[usuario]
product <- colnames(holder)[banda]
if(as.integer(dados_alemanha[dados_alemanha$user==user, product]) == 1) {
holder[usuario, banda]<-""
}else {
topN <- ((head(n=11,(dados_alemanha_ib_similaridade[order(dados_alemanha_ib_similaridade[,product],decreasing = T),]))))
}
}
}
View(topN)
?head
for(usuario in 1:nrow(holder)) {
for(banda in 1:col(holder)){
user <- rownames(holder)[usuario]
product <- colnames(holder)[banda]
if(as.integer(dados_alemanha[dados_alemanha$user==user, product]) == 1) {
holder[usuario, banda]<-""
}else {
topN <- ((head(n=11,(dados_alemanha_ib_similaridade[order(dados_alemanha_ib_similaridade[,product],decreasing = T),][product]))))
}
}
}
View(topN)
topN.names <- as.character([-1])
for(usuario in 1:nrow(holder)) {
for(banda in 1:col(holder)){
user <- rownames(holder)[usuario]
product <- colnames(holder)[banda]
if(as.integer(dados_alemanha[dados_alemanha$user==user, product]) == 1) {
holder[usuario, banda]<-""
}else {
topN <- ((head(n=11,(dados_alemanha_ib_similaridade[order(dados_alemanha_ib_similaridade[,product],decreasing = T),][product]))))
topN.names <- as.character([-1])
}
}
}
topN.names <- as.character[-1]
for(usuario in 1:nrow(holder)) {
for(banda in 1:col(holder)){
user <- rownames(holder)[usuario]
product <- colnames(holder)[banda]
if(as.integer(dados_alemanha[dados_alemanha$user==user, product]) == 1) {
holder[usuario, banda]<-""
}else {
topN <- ((head(n=11,(dados_alemanha_ib_similaridade[order(dados_alemanha_ib_similaridade[,product],decreasing = T),][product]))))
topN.names <- as.character[-1]
}
}
}
for(usuario in 1:nrow(holder)) {
for(banda in 1:col(holder)){
user <- rownames(holder)[usuario]
product <- colnames(holder)[banda]
if(as.integer(dados_alemanha[dados_alemanha$user==user, product]) == 1) {
holder[usuario, banda]<-""
}else {
topN <- ((head(n=11,(dados_alemanha_ib_similaridade[order(dados_alemanha_ib_similaridade[,product],decreasing = T),][product]))))
topN.names <- as.character(rownames(topN))
topN.similarities <- as.numeric(topN[-1])
}
}
}
topN.purchase <- dados_alemanha[,c("user", topN.names)]
View(topN.purchase)
for(usuario in 1:nrow(holder)) {
for(banda in 1:col(holder)){
user <- rownames(holder)[usuario]
product <- colnames(holder)[banda]
if(as.integer(dados_alemanha[dados_alemanha$user==user, product]) == 1) {
holder[usuario, banda]<-""
}else {
topN <- ((head(n=11,(dados_alemanha_ib_similaridade[order(dados_alemanha_ib_similaridade[,product],decreasing = T),][product]))))
topN.names <- as.character(rownames(topN))
topN.similarities <- as.numeric(topN[-1])
topN.names <- topN.names[-1]
topN.similarities <- topN.similarities[-1]
topN.purchase <- dados_alemanha[,c("user", topN.names)]
}
}
}
View(topN)
View(topN.purchase)
